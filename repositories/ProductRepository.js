import Repository,{baseUrl,serializeQuery}from"./Repository";export async function getTotalRecords(){const a=await Repository.get(`${baseUrl}/products/count`).then(a=>a.data).catch(a=>({error:JSON.stringify(a)}));return a}export async function getProductsByIds(a){const b=await Repository.get(`${baseUrl}api/products/getproductbyid/${a}`).then(a=>({items:a.data})).catch(a=>({error:JSON.stringify(a)}));return b}class ProductRepository{async getPromotionsProducts(a){const b=await Repository.get(`${baseUrl}/api/products/getPromotionsProducts?${serializeQuery(a)}`).then(a=>a.data&&0<a.data.length?a.data:null).catch(()=>null);return b}async getProducts(a){const b=await Repository.get(`${baseUrl}/api/products/getAllProductList?${serializeQuery(a)}`).then(a=>a.data&&0<a.data.length?a.data:null).catch(a=>(console.log(JSON.stringify(a)),null));return b}async getRelateProducts(a){const b=await Repository.get(`${baseUrl}/api/products/getRelateProductList?${serializeQuery(a)}`).then(a=>a.data&&0<a.data.length?a.data:null).catch(a=>(console.log(JSON.stringify(a)),null));return b}async getRelateResources(a){const b=await Repository.post(`${baseUrl}/api/products/getRelatedResources`,{tokenId:1,resources_token:a}).then(a=>200===a.status?a.data.data:null).catch(a=>(console.log(JSON.stringify(a)),null));return b}async getProductsById(a){const b=await Repository.get(`${baseUrl}/api/products/getproductbyid/${a}`).then(a=>a.data).catch(a=>({error:JSON.stringify(a)}));return b}async getProductsByIds(a){const b=await fetch(`${baseUrl}/api/products/getproductbyid/${a}`).then(a=>{if(200===a.status)return a.json();throw new Error("Something went wrong on api server!")}).then(a=>(console.log("first",a),a.data&&0<a.data.length?a.data:null)).catch(a=>(console.log(JSON.stringify(a)),null));return console.log("reponse",b),b}async getProductCategories(){const a=await Repository.get(`${baseUrl}/api/products/getAllcategories`).then(a=>(console.log(a),a.data.result)).catch(a=>({error:JSON.stringify(a)}));return a}async getProductCategoryBySlug(a){const b=await Repository.post(`${baseUrl}api/products/productbycatname`,{slug:a}).then(a=>a.data&&200==a.status?(console.log("response",a.data),a.data):null).catch(a=>(console.log(JSON.stringify(a.message)),null));return b}async getProductsByPriceRange(a){const b=await Repository.get(`${baseUrl}/products?${serializeQuery(a)}`).then(a=>a.data).catch(a=>({error:JSON.stringify(a)}));return b}}export default new ProductRepository;